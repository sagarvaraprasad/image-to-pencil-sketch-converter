{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12f4aeb6-1095-4b70-8c7e-67de1d5d9c7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "# Open the camera\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "if not cap.isOpened():\n",
    "    print(\"Error: Could not open the camera.\")\n",
    "    exit()\n",
    "\n",
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        print(\"Error: Could not read the frame.\")\n",
    "        break\n",
    "\n",
    "    cv2.imshow(\"Press 's' to capture\", frame)\n",
    "\n",
    "    # Press 's' to capture the image and process it\n",
    "    if cv2.waitKey(1) & 0xFF == ord('s'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "\n",
    "# Convert to sketch\n",
    "def sketch(image):\n",
    "    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale\n",
    "    blur = cv2.GaussianBlur(gray, (5, 5), 0)  # Apply Gaussian Blur\n",
    "    edges = cv2.Canny(blur, 10, 70)  # Detect edges\n",
    "    ret, sketch = cv2.threshold(edges, 50, 255, cv2.THRESH_BINARY_INV)  # Invert colors\n",
    "    return sketch\n",
    "\n",
    "# Apply sketch effect\n",
    "sketched_image = sketch(frame)\n",
    "\n",
    "# Show the sketched image\n",
    "cv2.imshow(\"Sketch\", sketched_image)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcaece94-4ae2-492c-b1ce-c4844fa47ef0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05668cb1-6661-4371-90ab-87d56e273321",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
